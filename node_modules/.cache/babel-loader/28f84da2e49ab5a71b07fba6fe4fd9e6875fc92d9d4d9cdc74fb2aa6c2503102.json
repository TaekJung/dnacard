{"ast":null,"code":"var _jsxFileName = \"/Users/KTJ/NftDnaCard/dnacard/bv_connect_contract_frontend/src/components/wallet.tsx\",\n  _s = $RefreshSig$();\nimport { useAccount, useConnect, useDisconnect } from \"wagmi\";\nimport { InjectedConnector } from \"wagmi/connectors/injected\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Wallet = ({\n  account,\n  setAccount\n}) => {\n  _s();\n  const {\n    address,\n    isConnected\n  } = useAccount();\n  const {\n    connect\n  } = useConnect({\n    connector: new InjectedConnector()\n  });\n  const {\n    disconnect\n  } = useDisconnect();\n  setAccount(address);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isConnected ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Connected to \", address, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => disconnect(),\n          children: \"Disconnect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => connect(),\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(Wallet, \"xQylegvsqFm5iI7mplyF7uUAgmc=\", false, function () {\n  return [useAccount, useConnect, useDisconnect];\n});\n_c = Wallet;\nvar _c;\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"names":["useAccount","useConnect","useDisconnect","InjectedConnector","jsxDEV","_jsxDEV","Fragment","_Fragment","Wallet","account","setAccount","_s","address","isConnected","connect","connector","disconnect","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/KTJ/NftDnaCard/dnacard/bv_connect_contract_frontend/src/components/wallet.tsx"],"sourcesContent":["import { ethers } from \"ethers\";\nimport { useState } from \"react\";\nimport { useAccount, useConnect, useDisconnect } from \"wagmi\";\nimport { InjectedConnector } from \"wagmi/connectors/injected\";\n\ninterface WalletProps {\n  account: string;\n  setAccount: (account: string) => void;\n}\n\nexport const Wallet = ({ account, setAccount }: WalletProps) => {\n  const { address, isConnected } = useAccount();\n  const { connect } = useConnect({\n    connector: new InjectedConnector(),\n  });\n  const { disconnect } = useDisconnect();\n  setAccount(address!);\n\n  return (\n    <>\n      {isConnected ? (\n        <>\n          <div>\n            Connected to {address}\n            <button onClick={() => disconnect()}>Disconnect</button>\n          </div>\n        </>\n      ) : (\n        <button onClick={() => connect()}>Connect Wallet</button>\n      )}\n    </>\n  );\n};"],"mappings":";;AAEA,SAASA,UAAU,EAAEC,UAAU,EAAEC,aAAa,QAAQ,OAAO;AAC7D,SAASC,iBAAiB,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAO9D,OAAO,MAAMC,MAAM,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAwB,CAAC,KAAK;EAAAC,EAAA;EAC9D,MAAM;IAAEC,OAAO;IAAEC;EAAY,CAAC,GAAGb,UAAU,CAAC,CAAC;EAC7C,MAAM;IAAEc;EAAQ,CAAC,GAAGb,UAAU,CAAC;IAC7Bc,SAAS,EAAE,IAAIZ,iBAAiB,CAAC;EACnC,CAAC,CAAC;EACF,MAAM;IAAEa;EAAW,CAAC,GAAGd,aAAa,CAAC,CAAC;EACtCQ,UAAU,CAACE,OAAQ,CAAC;EAEpB,oBACEP,OAAA,CAAAE,SAAA;IAAAU,QAAA,EACGJ,WAAW,gBACVR,OAAA,CAAAE,SAAA;MAAAU,QAAA,eACEZ,OAAA;QAAAY,QAAA,GAAK,eACU,EAACL,OAAO,eACrBP,OAAA;UAAQa,OAAO,EAAEA,CAAA,KAAMF,UAAU,CAAC,CAAE;UAAAC,QAAA,EAAC;QAAU;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrD;IAAC,gBACN,CAAC,gBAEHjB,OAAA;MAAQa,OAAO,EAAEA,CAAA,KAAMJ,OAAO,CAAC,CAAE;MAAAG,QAAA,EAAC;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EACzD,gBACD,CAAC;AAEP,CAAC;AAACX,EAAA,CAtBWH,MAAM;EAAA,QACgBR,UAAU,EACvBC,UAAU,EAGPC,aAAa;AAAA;AAAAqB,EAAA,GALzBf,MAAM;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}